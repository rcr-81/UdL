//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//********** DEPRECATED: all transfer is done with TransferirExpedient.java! ***********
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************
//**************************************************************************************

<import resource="classpath:alfresco/templates/webscripts/udl/helper/lib/constantsUdL.js">
<import resource="classpath:alfresco/templates/webscripts/udl/helper/lib/errorHandler.js">

var username = null;
var nodeRef = null;
var server = null;
var admin_username = null;
var admin_password = null;

for each (field in formdata.fields){
	if (field.name == "username"){
		username = field.value;
	}
	else if (field.name == "nodeRef"){
		nodeRef = field.value;
	}
	else if (field.name == "server"){
		server = field.value;
	}
	else if (field.name == "admin_username"){
		admin_username = field.value;
	}
	else if (field.name == "admin_password"){
		admin_password = field.value;
	}
}	

function declareRecordRecursive(node){
	if(node != undefined){
		if(node.isContainer){
			var nodes = node.children;
			for(var i=0; i<nodes.length;i++){
				if(nodes[i].isDocument){
					declareRecord(nodes[i].nodeRef);
				}
				else if (nodes[i].isContainer){
					declareRecordRecursive(nodes[i]);
				}
			}
		}
		else if (node.isDocument) {
			declareRecord(node.nodeRef);
		}
	}
	return node;
}

//requires to fill mandatory metadata before
function declareRecord(nodeRef){
	var url = server + "/share/proxy/alfresco/api/rma/actions/ExecutionQueue";
	var params = '{"name":"declareRecord","nodeRef":"'+ nodeRef +'"}';
	XMLHttpRequest.open("POST", url, false, admin_username, admin_password);
	XMLHttpRequest.setRequestHeader("Content-type", "application/json");
	XMLHttpRequest.send(params);	
	XMLHttpRequest.close();
}

impersonate.impersonate(username);

var expedient = search.findNode(nodeRef);
if (expedient == undefined || !expedient.isContainer) {
	status.code = 500;
	status.message = "Expedient at '" + pathExpedient + "' not found.";
	status.redirect = true;
}
else {	
	try {
		model.node = declareRecordRecursive(expedient);
	}
	catch(e){
		status.code = 500;
		status.message = handleError(e);
		status.redirect = true;
	}		
}